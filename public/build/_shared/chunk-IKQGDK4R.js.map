{
  "version": 3,
  "sources": ["../../../app/lib/useRootLoaderData.ts", "../../../app/components/PreviewWrapper.tsx", "../../../node_modules/suspend-react/dist/index.js", "../../../node_modules/@sanity/preview-kit/src/auth.ts", "../../../node_modules/@sanity/preview-kit/src/lazy.ts", "../../../node_modules/@sanity/preview-kit/src/definePreview.ts", "../../../node_modules/@sanity/preview-kit/src/PreviewSuspense.tsx", "../../../app/components/Loading.tsx"],
  "sourcesContent": ["import type {SerializeFrom} from '@remix-run/node'\nimport {useRouteLoaderData} from '@remix-run/react'\n\nimport type {loader as rootLoader} from '~/root'\n\nexport function useRootLoaderData() {\n  const data = useRouteLoaderData(`root`) as SerializeFrom<typeof rootLoader>\n\n  return data\n}\n", "import type {Params} from '@sanity/preview-kit'\nimport {definePreview, PreviewSuspense} from '@sanity/preview-kit'\nimport type {ReactNode} from 'react'\nimport {isValidElement} from 'react'\n\nimport {Loading} from '~/components/Loading'\nimport {useRootLoaderData} from '~/lib/useRootLoaderData'\nimport {projectDetails} from '~/sanity/projectDetails'\n\nconst {projectId, dataset} = projectDetails()\nconst usePreview = definePreview({projectId, dataset})\n\n// T default to any\ntype PreviewWrapperProps<T> = {\n  data: T\n  render: (data: T) => ReactNode\n  query: string | null\n  params: Params | null\n  fallback?: ReactNode\n}\n\n// Suspense boundary prevents usePreview from running on the server\n// Component just renders children if preview mode is not enabled\nexport function PreviewWrapper<T>(props: PreviewWrapperProps<T>) {\n  const {\n    // Given this data OR if preview is active, draft data\n    data,\n    // Render this component using the data\n    render,\n    // If preview mode is active, listen to this query\n    query = null,\n    // With these params\n    params = {},\n    // And fallback to this while loading\n    fallback = <Loading />,\n  } = props\n  const {preview, token} = useRootLoaderData()\n\n  if (!preview || !query) {\n    const Component = render(data)\n\n    return Component && isValidElement(Component) ? Component : null\n  }\n\n  return (\n    <PreviewSuspense fallback={fallback}>\n      <PreviewSuspended<typeof data>\n        query={query}\n        render={render}\n        params={params ?? {}}\n        token={token}\n      />\n    </PreviewSuspense>\n  )\n}\n\ntype PreviewSuspendedProps<T = any> = {\n  render: (previewData: T) => ReactNode\n  query: string\n  params: Params\n  token: string | null\n}\n\n// Browser-only preview component\nfunction PreviewSuspended<T = any>(props: PreviewSuspendedProps<T>) {\n  const {query, params = {}, token = null, render} = props\n  // A `null` token with rely on your Studio's auth in the same browser session\n  const previewData = usePreview(token, query, params)\n  const Component = render(previewData)\n\n  return Component && isValidElement(Component) ? Component : null\n}\n", "const globalCache = [];\n\nfunction shallowEqualArrays(arrA, arrB, equal = (a, b) => a === b) {\n  if (arrA === arrB) return true;\n  if (!arrA || !arrB) return false;\n  const len = arrA.length;\n  if (arrB.length !== len) return false;\n\n  for (let i = 0; i < len; i++) if (!equal(arrA[i], arrB[i])) return false;\n\n  return true;\n}\n\nfunction query(fn, keys, preload = false, config = {}) {\n  for (const entry of globalCache) {\n    // Find a match\n    if (shallowEqualArrays(keys, entry.keys, entry.equal)) {\n      // If we're pre-loading and the element is present, just return\n      if (preload) return undefined; // If an error occurred, throw\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'error')) throw entry.error; // If a response was successful, return\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'response')) return entry.response; // If the promise is still unresolved, throw\n\n      if (!preload) throw entry.promise;\n    }\n  } // The request is new or has changed.\n\n\n  const entry = {\n    keys,\n    equal: config.equal,\n    promise: // Execute the promise\n    fn(...keys) // When it resolves, store its value\n    .then(response => entry.response = response) // Remove the entry if a lifespan was given\n    .then(() => {\n      if (config.lifespan && config.lifespan > 0) {\n        setTimeout(() => {\n          const index = globalCache.indexOf(entry);\n          if (index !== -1) globalCache.splice(index, 1);\n        }, config.lifespan);\n      }\n    }) // Store caught errors, they will be thrown in the render-phase to bubble into an error-bound\n    .catch(error => entry.error = error)\n  }; // Register the entry\n\n  globalCache.push(entry); // And throw the promise, this yields control back to React\n\n  if (!preload) throw entry.promise;\n  return undefined;\n}\n\nconst suspend = (fn, keys, config) => query(fn, keys, false, config);\n\nconst preload = (fn, keys, config) => void query(fn, keys, true, config);\n\nconst peek = keys => {\n  var _globalCache$find;\n\n  return (_globalCache$find = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal))) == null ? void 0 : _globalCache$find.response;\n};\n\nconst clear = keys => {\n  if (keys === undefined || keys.length === 0) globalCache.splice(0, globalCache.length);else {\n    const entry = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal));\n\n    if (entry) {\n      const index = globalCache.indexOf(entry);\n      if (index !== -1) globalCache.splice(index, 1);\n    }\n  }\n};\n\nexport { clear, peek, preload, suspend };\n", "/**\n * Checks if the current token, or cookies, result in a valid session\n * @internal\n */\nexport const _checkAuth = async (\n  projectId: string,\n  token: string | null\n): Promise<boolean> => {\n  const headers = token ? { Authorization: `Bearer ${token}` } : undefined\n  const res = await fetch(`https://${projectId}.api.sanity.io/v1/users/me`, {\n    credentials: 'include',\n    headers,\n  })\n  const json = await res.json()\n  return Boolean(json?.id)\n}\n", "import type EventSourcePolyfillType from '@sanity/eventsource/browser'\nimport type { Config, GroqStore } from '@sanity/groq-store'\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/**\n * Lazy loaded, heavy, libs. Most use cases want to wrap these in `suspend-react`:\n * ```tsx\n * import {suspend} from 'suspend-react'\n * import {_lazyGroqStore} from '@sanity/preview-kit'\n *\n * export default function PreviewComponent() {\n *   const groqStore = suspend(() => _lazyGroqStore(), ['@sanity/preview-kit', '@sanity/groq-store])\n * }\n * ```\n * This makes them load in any app that uses React 18 and have Suspense features enabled.\n * For Next 13 and React Server Components, they should be wrapped in `React.use` and `React.cache`, this is done for you by `next-sanity`:\n * ```tsx\n * import {cache, use} from 'react'\n * import {_lazyGroqStore} from '@sanity/preview-kit'\n *\n * const lazyGroqStore = cache(_lazyGroqStore)\n *\n * export default function PreviewComponent() {\n *   const groqStore = use(lazyGroqStore())\n * }\n * ```\n * @internal\n */\nexport const _lazyGroqStore = async (): Promise<\n  (config: Config) => GroqStore\n> => {\n  const pkg = await import('@sanity/groq-store')\n  const { groqStore } = 'default' in pkg ? pkg.default : pkg\n  return groqStore\n}\n\n/**\n * See the typings for `_lazyGroqStore` for detailed usage instructions.\n * @internal\n */\nexport const _lazyEventSourcePolyfill = async (): Promise<\n  typeof EventSourcePolyfillType\n> => {\n  const pkg = await import('@sanity/eventsource/browser')\n  const EventSourcePolyfill = 'default' in pkg ? pkg.default : pkg\n  return EventSourcePolyfill\n}\n", "import type EventSourcePolyfill from '@sanity/eventsource/browser'\nimport type { Config, GroqStore, Subscription } from '@sanity/groq-store'\nimport { useEffect, useMemo, useState, useSyncExternalStore } from 'react'\nimport { suspend } from 'suspend-react'\n\nimport { _checkAuth } from './auth'\nimport { _lazyEventSourcePolyfill, _lazyGroqStore } from './lazy'\n\n/**\n * The params type used both in `@sanity/client`:\n * ```tsx\n * import {createClient} from '@sanity/client'\n *\n * const client = createClient()\n * await client.fetch(\n *   '*[_type == \"post\"]',\n *   params // <-- this is the type\n * )\n * ```\n * It's also used with the `usePreview` hook returned by `definePreview`:\n * ```tsx\n * import {definePreview} from '@sanity/preview-kit'\n * const usePreview = definePreview()\n * usePreview(\n *   token,\n *   '*[_type == \"post\"]',\n *   params // <-- this is the type\n * )\n * ```\n * @public\n */\nexport type Params = Record<string, unknown>\n\n/**\n * @internal\n */\nexport interface _PreviewConfig extends PreviewConfig {\n  /**\n   * Lazy load `@sanity/groq-store`.\n   */\n  importGroqStore: () => (config: Config) => GroqStore\n  /**\n   * Lazy load `@sanity/eventsource/browser`.\n   * This happens if `token` is specified.\n   */\n  importEventSourcePolyfill: () => typeof EventSourcePolyfill\n  /**\n   * Suspend render until the dataset is done loading.\n   */\n  preload: <R = any, P extends Params = Params, Q extends string = string>(\n    store: GroqStore,\n    query: Q,\n    /**\n     * Must wrap in `useMemo` to avoid infinite loop\n     */\n    params?: P\n  ) => R\n  /**\n   * Only called if `onPublicAccessOnly` is defined. Render is suspended until this Promise resolves to a boolean.\n   */\n  checkAuth: (projectId: string, token: string | null) => boolean\n}\n\n/**\n * Return params that are stable with deep equal as long as the key order is the same\n * @internal\n */\nfunction useParams<P extends Params = Params>(params?: P): P {\n  const stringifiedParams = useMemo(\n    () => JSON.stringify(params || {}),\n    [params]\n  )\n  return useMemo(() => JSON.parse(stringifiedParams), [stringifiedParams])\n}\n\n/**\n * @internal\n */\nexport const _definePreview = ({\n  projectId,\n  dataset,\n  documentLimit = 3000,\n  subscriptionThrottleMs = 10,\n  overlayDrafts = true,\n  listen = true,\n  importEventSourcePolyfill,\n  importGroqStore,\n  preload,\n  onPublicAccessOnly,\n  checkAuth,\n  includeTypes,\n}: _PreviewConfig): UsePreview => {\n  if (!projectId) {\n    console.warn(`No projectId set for createPreviewHook, returning dummy hook`)\n    // No projectId set, just return a dummy hook and warn\n    const usePreview: UsePreview = function usePreview() {\n      console.warn(\n        `The hook returned by createPreviewHook is a dummy as there is no projectId set, returning null`\n      )\n      return null\n    }\n    return usePreview\n  }\n\n  let store: ReturnType<typeof import('@sanity/groq-store').groqStore>\n  return function usePreview<\n    R = any,\n    P extends Params = Params,\n    Q extends string = string\n  >(\n    token: string | null,\n    query: Q,\n    _params?: P,\n    _serverSnapshot?: R\n  ): R | null {\n    if (typeof document === 'undefined') {\n      throw new Error(\n        `Calling usePreview outside a browser environment isn't supported. Ensure the component using the hook is only rendering on the client. For example by wrapping it in PreviewSuspense.`\n      )\n    }\n    if (!token && token !== null) {\n      throw new Error(\n        'No `token` given to usePreview hook, if this is intentional then set it to `null`'\n      )\n    }\n    const [serverSnapshot] = useState<R | undefined>(() => _serverSnapshot)\n\n    const params = useParams<P>(_params)\n\n    if (!store) {\n      if (onPublicAccessOnly) {\n        const hasAuth = checkAuth(projectId, token)\n        if (!hasAuth) {\n          onPublicAccessOnly()\n        }\n      }\n\n      // Lazy load `@sanity/groq-store` as it's quite a big chunk of JS`\n      const groqStore = importGroqStore()\n\n      store = groqStore({\n        projectId,\n        dataset,\n        documentLimit,\n        subscriptionThrottleMs,\n        includeTypes,\n        token: token === null ? undefined : token,\n        // Lazy load the huge `@sanity/eventsource/browser` polyfill, but only if a token is specified\n        EventSource: token === null ? undefined : importEventSourcePolyfill(),\n        listen,\n        overlayDrafts,\n      })\n    }\n\n    const initial = serverSnapshot ?? preload<R, P, Q>(store, query, params)\n    const syncStore = useMemo(() => {\n      // Make sure that React suspends the component until the groq store is finished loading the dataset and able to execute the query\n      let snapshot = initial\n\n      return {\n        getServerSnapshot:\n          serverSnapshot === undefined ? undefined : () => serverSnapshot,\n        getSnapshot: () => snapshot,\n        subscribe: (onStoreChange: () => void) => {\n          let subscription: Subscription | undefined\n          const handleError = (err: Error) => {\n            console.error(\n              'Error thrown in the usePreviewHook subscription',\n              err\n            )\n            throw err\n          }\n          if (listen) {\n            subscription = store.subscribe(\n              query,\n              typeof params === 'undefined' ? {} : params,\n              (err, result) => {\n                if (err) {\n                  handleError(err)\n                } else {\n                  snapshot = result\n                  onStoreChange()\n                }\n              }\n            )\n          } else {\n            store\n              .query(query, params)\n              .then((result) => {\n                snapshot = result\n                onStoreChange()\n              })\n              .catch(handleError)\n          }\n\n          return () => subscription?.unsubscribe()\n        },\n      }\n    }, [initial, params, query, serverSnapshot])\n\n    useEffect(() => {\n      const callback = () => {\n        store.close()\n      }\n      window.addEventListener('beforeunload', callback)\n      return () => window.removeEventListener('beforeunload', callback)\n    }, [])\n\n    return useSyncExternalStore(\n      syncStore.subscribe,\n      syncStore.getSnapshot,\n      syncStore.getServerSnapshot\n    )\n  }\n}\n\n/**\n * @public\n */\nexport type UsePreview<R = any, P = Params, Q = string> = (\n  token: string | null,\n  query: Q,\n  params?: P,\n  /**\n   * Providing a serverSnapshot significantly speeds up hydration time and lets you opt-in to not show loading UI\n   */\n  serverSnapshot?: R\n) => R\n\n/**\n * @public\n */\nexport interface PreviewConfig\n  extends Pick<\n    Config,\n    'projectId' | 'dataset' | 'includeTypes' | 'overlayDrafts' | 'listen'\n  > {\n  /**\n   * The maximum number of documents, to prevent using too much memory unexpectedly\n   * Throws on the first operation (query, retrieval, subscription) if reaching this limit.\n   * @defaultValue 3000\n   */\n  documentLimit?: number\n  /**\n   * Throttle the event emits to batch updates. If you have a lot of editors changing content at the same time it might help to increase this value to reduce the amount of rerenders React have to perform.\n   * @defaultValue 10\n   */\n  subscriptionThrottleMs?: number\n  /**\n   * You want to throw an error in this function if it's considered a failure if draft documents can't be queried.\n   *\n   * Without a `token` then the dataset export will attempt to use reuse the user token by setting `credentials: \"include\" when calling fetch()`.\n   * This only works with the `cookie` auth model you find in Sanity Studio. It doesn't work in browsers that require `cookieless` to login, such as iOS Safari and more.\n   * Currently the only way to fix this is to define a `token` that has `viewer` rights in your project.\n   * It's not recommended to rely on auth at the moment as it limits the use of previews to Chromium based browsers and users that have a Sanity account in the project.\n   * If you still want to use the `cookie` auth model you'll want to throw an error if the user don't have a cookie based session established. If this method is undefined, the default, it'll only query published, public, documents.\n   * ```tsx\n   * import {definePreview} from '@sanity/preview-kit'\n   * const usePreview = definePreview({\n   *  onPublicAccessOnly: () => {\n   *   throw new Error('Not authenticated - preview not available')\n   * })\n   * ```\n   *\n   * If you're building a preview experience that doesn't query drafts then you can just leave this function undefined.\n   *\n   * Enabling this will slightly slow-down startup as it will wait with exporting the dataset until it has checked if you have a cookie session.\n   * This check is done by calling `https://${projectId}.api.sanity.io/v1/users/me` with fetch() and `credentials: \"include\"`.\n   * If `token` is set it'll set `headers: {Authorization: \"Bearer ${token}\"}` instead.\n   * But if you're already setting `token` you can skip defining this function to run startup faster, if the `token` is invalid it'll throw while exporting the dataset anyway.\n   */\n  onPublicAccessOnly?: () => void\n  /**\n   * @defaultValue true\n   */\n  overlayDrafts?: boolean\n}\n\n/**\n * @internal\n */\nexport const _preloadQuery = <R = any>(\n  store: GroqStore,\n  query: string,\n  params?: Params\n): Promise<R> =>\n  // eslint-disable-next-line no-warning-comments\n  // @todo: fix the casting to any here\n  store.query<R>(query, params)\n\n/**\n * @public\n */\nexport const definePreview = (config: PreviewConfig): UsePreview =>\n  _definePreview({\n    ...config,\n    importEventSourcePolyfill: () =>\n      suspend(\n        () => _lazyEventSourcePolyfill(),\n        ['@sanity/preview-kit', '@sanity/eventsource/browser']\n      ),\n    importGroqStore: () =>\n      suspend(\n        () => _lazyGroqStore(),\n        ['@sanity/preview-kit', '@sanity/groq-store']\n      ),\n    preload: (store, query, params) =>\n      suspend(\n        () => _preloadQuery<any>(store, query, params),\n        ['@sanity/preview-kit', 'preload', query, JSON.stringify(params ?? {})]\n      ),\n    checkAuth: (projectId, token) =>\n      suspend(\n        () => _checkAuth(projectId, token),\n        ['@sanity/preview-kit', 'checkAuth', projectId, token]\n      ),\n  })\n", "import { type ReactNode, Suspense, useEffect, useReducer } from 'react'\n\n/** @public */\nexport type PreviewSuspenseProps = {\n  children: ReactNode\n  fallback: ReactNode\n}\n\n/**\n * Preview Mode really needs to only load as client-only, as it uses EventSource to stream data from Content Lake.\n * We don't want to run anything on the server but the fallback until it's loaded.\n * It's used in the same way as `React.Suspense`, it just also defers render until the component is mounted:\n * ```tsx\n * import {PreviewSuspense} from '@sanity/preview-kit'\n *\n * export default function App() {\n *   return (\n *     <PreviewSuspense fallback={<div>Loading preview...</div>}>\n *       <ComponentUsingPreviewHooks />\n *     </PreviewSuspense>\n *   )\n * }\n * ```\n * @public\n */\nexport function PreviewSuspense({ children, fallback }: PreviewSuspenseProps) {\n  const [mounted, mount] = useReducer(() => true, false)\n  useEffect(mount, [mount])\n\n  return (\n    <Suspense fallback={fallback}>{mounted ? children : fallback}</Suspense>\n  )\n}\n", "export function Loading() {\n  return (\n    <div className=\"animate-pulse border border-dashed border-red-500 bg-red-50 p-8 text-center\">\n      Loading preview...\n    </div>\n  )\n}\n"],
  "mappings": "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",
  "names": ["entry", "_checkAuth", "projectId", "token", "headers", "Authorization", "concat", "res", "fetch", "credentials", "json", "Boolean", "id", "_lazyGroqStore", "pkg", "groqStore", "default", "_lazyEventSourcePolyfill", "EventSourcePolyfill", "useParams", "params", "stringifiedParams", "useMemo", "JSON", "stringify", "parse", "_definePreview", "_ref", "dataset", "documentLimit", "subscriptionThrottleMs", "overlayDrafts", "listen", "importEventSourcePolyfill", "importGroqStore", "preload", "onPublicAccessOnly", "checkAuth", "includeTypes", "console", "warn", "usePreview", "store", "query", "_params", "_serverSnapshot", "document", "Error", "serverSnapshot", "useState", "hasAuth", "EventSource", "initial", "syncStore", "snapshot", "getServerSnapshot", "getSnapshot", "subscribe", "onStoreChange", "subscription", "handleError", "err", "error", "result", "then", "catch", "unsubscribe", "useEffect", "callback", "close", "window", "addEventListener", "removeEventListener", "useSyncExternalStore", "_preloadQuery", "definePreview", "config", "suspend", "PreviewSuspense", "_ref2", "children", "fallback", "mounted", "mount", "useReducer", "jsx", "Suspense", "import_react", "import_jsx_dev_runtime", "query"]
}
