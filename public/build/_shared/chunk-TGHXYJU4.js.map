{
  "version": 3,
  "sources": ["empty-module:~/lib/og.server", "../../../app/routes/resource.og.tsx", "../../../app/lib/secondsToMinutes.ts"],
  "sourcesContent": ["module.exports = {};", "import type {LoaderArgs} from '@remix-run/node'\n\nimport {generatePngFromDocument} from '~/lib/og.server'\nimport {previewClient} from '~/sanity/client'\n\nexport const OG_IMAGE_WIDTH = 1200\nexport const OG_IMAGE_HEIGHT = 630\n\nexport const loader = async ({request}: LoaderArgs) => {\n  const {origin, searchParams} = new URL(request.url)\n  const id = searchParams.get('id')\n\n  if (!id) {\n    return new Response('Bad request', {status: 400})\n  }\n\n  const doc = await previewClient.fetch(`*[_id == $id][0]{ ..., artist-> }`, {\n    id,\n  })\n\n  // Reject requests for documents that don't exist\n  if (!doc) {\n    return new Response('Bad request', {status: 400})\n  }\n\n  const png = await generatePngFromDocument(doc, origin)\n\n  // Respond with the PNG buffer\n  return new Response(png, {\n    status: 200,\n    headers: {\n      // Tell the browser the response is an image\n      'Content-Type': 'image/png',\n      // Optional caching settings\n      'cache-control':\n        process.env.NODE_ENV === 'development'\n          ? 'no-cache'\n          : 'public, immutable, no-transform, max-age=31536000',\n    },\n  })\n}\n", "export function secondsToMinutes(seconds: number) {\n  return `${Math.floor(seconds / 60)}:${String(seconds % 60).padStart(2, '0')}`\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACAlB;AAAA;AAAA;AAAA;AAAA;AAEA,gBAAsC;AAG/B,IAAM,iBAAiB;AACvB,IAAM,kBAAkB;;;ACN/B;AAAA;AAAA;AAAA;AAAA;AAAO,SAAS,iBAAiB,SAAiB;AAChD,SAAO,GAAG,KAAK,MAAM,UAAU,EAAE,KAAK,OAAO,UAAU,EAAE,EAAE,SAAS,GAAG,GAAG;AAC5E;",
  "names": []
}
