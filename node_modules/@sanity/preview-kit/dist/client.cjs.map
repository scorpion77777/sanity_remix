{"version":3,"file":"client.cjs","sources":["../src/client/jsonpath.ts","../src/client/editIntent.ts","../src/client/sourcemap.ts","../src/client/transcode.ts","../src/client/request.ts","../src/client/mapToEditLinks.ts","../src/client/index.ts"],"sourcesContent":["import type { PathSegment } from './types'\n\nconst ESCAPE: Record<string, string> = {\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\',\n}\n\nconst UNESCAPE: Record<string, string> = {\n  '\\\\f': '\\f',\n  '\\\\n': '\\n',\n  '\\\\r': '\\r',\n  '\\\\t': '\\t',\n  \"\\\\'\": \"'\",\n  '\\\\\\\\': '\\\\',\n}\n\n/** @internal */\nexport function normalisedJsonPath(path: PathSegment[]): string {\n  return `$${path\n    .map((key) => {\n      if (typeof key === 'string') {\n        const escapedKey = key.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `['${escapedKey}']`\n      }\n\n      return `[${key}]`\n    })\n    .join('')}`\n}\n\n/** @internal */\nexport function parseNormalisedJsonPath(path: string): PathSegment[] {\n  const parsed: PathSegment[] = []\n\n  const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]/g\n  let match: RegExpExecArray | null\n\n  while ((match = parseRe.exec(path)) !== null) {\n    if (match[1] !== undefined) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push(key)\n      continue\n    }\n\n    if (match[2] !== undefined) {\n      parsed.push(parseInt(match[2], 10))\n      continue\n    }\n  }\n\n  return parsed\n}\n","import {\n  ContentSourceMapDocument,\n  ContentSourceMapDocuments,\n} from '@sanity/client'\n\nimport { parseNormalisedJsonPath } from './jsonpath'\nimport type { PathSegment, StudioUrl } from './types'\n\n/** @alpha */\nexport type EditLink = `/intent/edit/id=${string};path=${string}`\n/** @alpha */\nexport interface EditLinkProps {\n  studioUrl: StudioUrl\n  document: ContentSourceMapDocument\n}\n/** @alpha */\nexport type DefineEditLink = (\n  studioUrl: StudioUrl\n) => (\n  sourceDocument: ContentSourceMapDocuments[number]\n) => `${StudioUrl}${EditLink}`\n\n/** @alpha */\nexport function defineEditLink(\n  _studioUrl: StudioUrl\n): (\n  sourceDocument: ContentSourceMapDocuments[number],\n  path: string | PathSegment[]\n) => string {\n  const studioUrl = _studioUrl.replace(/\\/$/, '')\n  return (sourceDocument, path) =>\n    `${studioUrl}/intent/edit/id=${\n      sourceDocument._id\n    };path=${encodeJsonPathToUriComponent(path)}`\n}\n\n/** @alpha */\nexport function encodeJsonPathToUriComponent(\n  path: string | PathSegment[]\n): string {\n  const sourcePath = Array.isArray(path) ? path : parseNormalisedJsonPath(path)\n  return encodeURIComponent(\n    sourcePath\n      .map((key, i) =>\n        // eslint-disable-next-line no-nested-ternary\n        typeof key === 'number' ? `[${key}]` : i > 0 ? `.${key}` : key\n      )\n      .join('')\n  )\n}\n","/* eslint-disable no-nested-ternary */\nimport type {\n  ContentSourceMap,\n  ContentSourceMapDocuments,\n  ContentSourceMapMapping,\n} from '@sanity/client'\n\nimport { normalisedJsonPath } from './jsonpath'\nimport type {\n  ContentSourceMapQueryResponse,\n  Logger,\n  PathSegment,\n} from './types'\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null\n}\n\nfunction isArray(value: unknown): value is Array<unknown> {\n  return value !== null && Array.isArray(value)\n}\n\n/** @alpha */\nexport type Encoder = (\n  value: string,\n  sourceDocument: ContentSourceMapDocuments[number],\n  path: string\n) => unknown\n\n/** @alpha */\nexport function encode(\n  response: ContentSourceMapQueryResponse,\n  encoder: Encoder\n): ContentSourceMapQueryResponse {\n  if (!response.resultSourceMap) {\n    throw new TypeError('Missing resultSourceMap')\n  }\n\n  response.result = encodeIntoResult(response, encoder)\n  return response\n}\n\n/** @alpha */\nexport function encodeIntoResult(\n  response: ContentSourceMapQueryResponse,\n  encoder: Encoder\n): ReturnType<Encoder> {\n  return walkMap(response.result, (value, path) => {\n    // Only map strings, we could extend this in the future to support other types like integers...\n    if (typeof value !== 'string') {\n      return value\n    }\n\n    const resolveMappingResult = resolveMapping(path, response.resultSourceMap)\n    if (!resolveMappingResult) {\n      return value\n    }\n\n    const [mapping, , pathSuffix] = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument =\n      response.resultSourceMap.documents[mapping.source.document]\n    const sourcePath = response.resultSourceMap.paths[mapping.source.path]\n\n    return encoder(value, sourceDocument, sourcePath + pathSuffix)\n  })\n}\n\ntype WalkMapFn = (value: unknown, path: PathSegment[]) => unknown\n\n// generic way to walk a nested object or array and apply a mapping function to each value\nfunction walkMap(\n  value: unknown,\n  mappingFn: WalkMapFn,\n  path: PathSegment[] = []\n): unknown {\n  if (isArray(value)) {\n    return value.map((v, idx) => walkMap(v, mappingFn, path.concat(idx)))\n  }\n\n  if (isRecord(value)) {\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [\n        k,\n        walkMap(v, mappingFn, path.concat(k)),\n      ])\n    )\n  }\n\n  return mappingFn(value, path)\n}\n\nfunction resolveMapping(\n  resultPath: PathSegment[],\n  csm: ContentSourceMap,\n  logger?: Logger\n): [ContentSourceMapMapping, string, string] | undefined {\n  const resultJsonPath = normalisedJsonPath(resultPath)\n\n  if (!csm.mappings) {\n    logger?.error('Missing resultSourceMap.mappings', { resultSourceMap: csm })\n    return undefined\n  }\n\n  if (csm.mappings[resultJsonPath] !== undefined) {\n    return [csm.mappings[resultJsonPath], resultJsonPath, '']\n  }\n\n  const mappings = Object.entries(csm.mappings)\n    .filter(([key]) => resultJsonPath.startsWith(key))\n    .sort(([key1], [key2]) => key2.length - key1.length)\n\n  if (mappings.length == 0) {\n    return undefined\n  }\n\n  const [matchedPath, mapping] = mappings[0]\n  const pathSuffix = resultJsonPath.substring(matchedPath.length)\n  return [mapping, matchedPath, pathSuffix]\n}\n","/* eslint-disable no-nested-ternary */\nimport type { ContentSourceMapDocuments } from '@sanity/client'\nimport { vercelStegaEncode } from '@vercel/stega'\n\nimport { defineEditLink } from './editIntent'\nimport { parseNormalisedJsonPath } from './jsonpath'\nimport { encode } from './sourcemap'\nimport type {\n  ContentSourceMapQueryResponse,\n  Logger,\n  PathSegment,\n} from './types'\nimport type { ClientConfig, FilterDefault } from './types'\n\nconst filterDefault: FilterDefault = ({ path }) => {\n  const endPath = path.at(-1)\n  // Never encode slugs\n  if (path.at(-2) === 'slug' && endPath === 'current') {\n    return false\n  }\n\n  // Skip underscored keys, needs better heuristics but it works for now\n  if (typeof endPath === 'string' && endPath.startsWith('_')) {\n    return false\n  }\n\n  // Don't encode style keys for portable text\n  if (typeof path.at(-2) === 'number' && endPath === 'style') {\n    return false\n  }\n\n  return true\n}\n\nexport type Transcoder = (\n  input: string,\n  sourceDocument: ContentSourceMapDocuments[number],\n  sourcePath: PathSegment[]\n) => string\n\nconst TRUNCATE_LENGTH = 20\n\n/**\n * @internal\n */\nexport function createTranscoder(\n  studioUrl: ClientConfig['studioUrl'],\n  encodeSourceMapAtPath?: ClientConfig['encodeSourceMapAtPath'],\n  logger?: Logger\n): {\n  report: Record<\n    'encoded' | 'skipped',\n    { path: string; length: number; value: string }[]\n  >\n  transcode: Transcoder\n  walk: (input: ContentSourceMapQueryResponse) => ContentSourceMapQueryResponse\n} {\n  const createEditLink = defineEditLink(studioUrl)\n  const report: Record<\n    'encoded' | 'skipped',\n    { path: string; length: number; value: string }[]\n  > = { encoded: [], skipped: [] }\n\n  const transcode = (\n    input: string,\n    sourceDocument: ContentSourceMapDocuments[number],\n    sourcePath: PathSegment[]\n  ): string => {\n    // Allow userland to control when to opt-out of encoding\n    if (\n      (typeof encodeSourceMapAtPath === 'function'\n        ? encodeSourceMapAtPath({ path: sourcePath, filterDefault })\n        : filterDefault({ path: sourcePath, filterDefault })) === false\n    ) {\n      if (logger) {\n        report.skipped.push({\n          path: JSON.stringify(sourcePath),\n          value: `${input.slice(0, TRUNCATE_LENGTH)}${\n            input.length > TRUNCATE_LENGTH ? '...' : ''\n          }`,\n          length: input.length,\n        })\n      }\n      return input\n    }\n\n    if (logger) {\n      report.encoded.push({\n        path: JSON.stringify(sourcePath),\n        value: `${input.slice(0, TRUNCATE_LENGTH)}${\n          input.length > TRUNCATE_LENGTH ? '...' : ''\n        }`,\n        length: input.length,\n      })\n    }\n\n    return `${vercelStegaEncode({\n      origin: 'sanity.io',\n      href: createEditLink(sourceDocument, sourcePath),\n    })}${input}`\n  }\n  return {\n    report,\n    transcode,\n    walk: (input: ContentSourceMapQueryResponse) => {\n      // Clear previous reports\n      report.encoded.length = 0\n      report.skipped.length = 0\n      // Start the recursive machinery\n      return encode(input, (value, sourceDocument, path) =>\n        transcode(value, sourceDocument, parseNormalisedJsonPath(path))\n      )\n    },\n  }\n}\n","/**\n * Creates a custom `httpRequest` handler for `SanityClient`, that\n * includes a middleware that handles source maps and stega encoding.\n */\nimport {\n  type HttpRequest,\n  requester as originalRequester,\n  type RequestOptions,\n} from '@sanity/client'\nimport isPlainObject from 'lodash.isplainobject'\nimport invariant from 'tiny-invariant'\n\nimport { createTranscoder } from './transcode'\nimport type {\n  ClientConfig,\n  ContentSourceMapQueryResponse,\n  PathSegment,\n} from './types'\n\ntype TranscodeResponseConfig = Pick<\n  ClientConfig,\n  'studioUrl' | 'encodeSourceMapAtPath' | 'logger'\n>\n\nfunction transcodeResponse({\n  studioUrl,\n  encodeSourceMapAtPath,\n  logger,\n}: TranscodeResponseConfig) {\n  const transcoder = createTranscoder(studioUrl, encodeSourceMapAtPath, logger!)\n  return {\n    onResponse: (response: unknown) => {\n      if (!isBodyResponse(response)) {\n        return response\n      }\n\n      if (\n        Array.isArray(response.body) ||\n        typeof response.body === 'string' ||\n        isPlainObject(response.body)\n      ) {\n        if (!isContentSourceMapBody(response.body)) {\n          if (logger) {\n            logger?.error(\n              '[@sanity/preview-kit]: Missing Content Source Map from response body',\n              response.body\n            )\n          }\n          return response\n        }\n\n        const body = transcoder.walk(response.body)\n\n        if (logger) {\n          const isSkipping = transcoder.report.skipped.length\n          const isEncoding = transcoder.report.encoded.length\n          if (isSkipping || isEncoding) {\n            logger?.groupCollapsed(\n              '[@sanity/preview-kit]: Stega encoding source map into result'\n            )\n            logger?.log(\n              `[@sanity/preview-kit]: Paths encoded: ${transcoder.report.encoded.length}, skipped: ${transcoder.report.skipped.length}`\n            )\n          }\n          if (transcoder.report.encoded.length > 0) {\n            logger?.log(`[@sanity/preview-kit]: Table of encoded paths`)\n            logger?.table(transcoder.report.encoded)\n          }\n          if (transcoder.report.skipped.length > 0) {\n            const skipped = new Map<string, PathSegment[]>()\n            for (const { path } of transcoder.report.skipped) {\n              skipped.set(path, JSON.parse(path))\n            }\n            logger?.log(`[@sanity/preview-kit]: List of skipped paths`, [\n              ...skipped.values(),\n            ])\n          }\n\n          if (isSkipping || isEncoding) {\n            logger?.groupEnd()\n          }\n        }\n\n        return { ...response, body }\n      }\n\n      return response\n    },\n  }\n}\n\n/** @internal */\nexport function createHttpRequest({\n  studioUrl,\n  encodeSourceMapAtPath,\n  logger,\n}: ClientConfig): HttpRequest {\n  invariant(studioUrl, 'Missing studioUrl in client config')\n  const superRequester = originalRequester.clone()\n\n  // Apply the transcoder middleware\n  superRequester.use(\n    transcodeResponse({ studioUrl, encodeSourceMapAtPath, logger })\n  )\n\n  function httpRequest(\n    options: RequestOptions,\n    requester = superRequester\n  ): HttpRequest {\n    return requester({ maxRedirects: 0, ...options } as any)\n  }\n\n  httpRequest.defaultRequester = superRequester\n\n  return httpRequest\n}\n\nfunction isBodyResponse(response: unknown): response is { body?: unknown } {\n  return typeof response === 'object' && response !== null\n}\n\n/** @alpha */\nexport function isContentSourceMapBody(\n  body: unknown\n): body is ContentSourceMapQueryResponse {\n  return typeof body === 'object' && body !== null && 'resultSourceMap' in body\n}\n","import { defineEditLink } from './editIntent'\nimport { encodeIntoResult } from './sourcemap'\nimport type { ContentSourceMapQueryResponse } from './types'\n\n/** @alpha */\nexport function mapToEditLinks(\n  response: ContentSourceMapQueryResponse,\n  studioUrl: string\n): unknown {\n  const createEditLink = defineEditLink(studioUrl)\n  return encodeIntoResult(response, (_, sourceDocument, path) => {\n    return createEditLink(sourceDocument, path)\n  })\n}\n","import { createClient as _createClient, SanityClient } from '@sanity/client'\n\nimport { createHttpRequest } from './request'\nimport type { ClientConfig } from './types'\n\nexport type * from './mapToEditLinks'\nexport { mapToEditLinks } from './mapToEditLinks'\nexport type * from './types'\n\n/**\n * @alpha\n */\nexport const createClient = (config: ClientConfig): SanityClient => {\n  const {\n    encodeSourceMap = detectEnableSourceMap(),\n    studioUrl = detectStudioUrl(),\n    logger,\n  } = config\n\n  let shouldEncodeSourceMap = encodeSourceMap === true\n\n  // If encodeSourceMap is set to 'auto', then we need to check if we're running on Vercel and on a preview deployment\n  if (encodeSourceMap === 'auto') {\n    shouldEncodeSourceMap = isVercelPreviewEnvironment()\n  }\n\n  try {\n    if (shouldEncodeSourceMap) {\n      logger?.debug('[@sanity/preview-kit]: Creating source map enabled client')\n      const httpRequest = createHttpRequest({ ...config, studioUrl })\n      return new SanityClient(httpRequest, {\n        ...config,\n        // Source maps by Content Lake are required in order to know where to insert the encoded source maps into strings\n        resultSourceMap: true,\n      })\n    }\n  } catch (err) {\n    console.error(\n      '[@sanity/preview-kit]: Error creating client',\n      err,\n      'falling back to non-embedded sourcemap mode'\n    )\n  }\n  return _createClient(config)\n}\n\nfunction isVercelPreviewEnvironment() {\n  try {\n    // @ts-expect-error -- VERCEL_ENV is not a declared import.meta.env variable\n    return import.meta.env.VERCEL_ENV === 'preview'\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.VERCEL_ENV === 'preview'\n  } catch {\n    // ignore\n  }\n  return false\n}\n\nfunction detectEnableSourceMap(): ClientConfig['encodeSourceMap'] {\n  try {\n    // @ts-expect-error -- SANITY_SOURCE_MAP is not a declared import.meta.env variable\n    return import.meta.env.SANITY_SOURCE_MAP === 'true' || 'auto'\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.SANITY_SOURCE_MAP === 'true' || 'auto'\n  } catch {\n    // ignore\n  }\n  return 'auto'\n}\n\n// eslint-disable-next-line consistent-return\nfunction detectStudioUrl() {\n  try {\n    // @ts-expect-error -- SANITY_STUDIO_URL is not a declared import.meta.env variable\n    return import.meta.env.SANITY_STUDIO_URL\n  } catch {\n    // ignore\n  }\n  try {\n    // eslint-disable-next-line no-process-env\n    return process.env.SANITY_STUDIO_URL\n  } catch {\n    // ignore\n  }\n}\n"],"names":["ESCAPE","UNESCAPE","normalisedJsonPath","path","concat","map","key","escapedKey","replace","match","join","parseNormalisedJsonPath","parsed","parseRe","exec","m","push","parseInt","defineEditLink","_studioUrl","studioUrl","sourceDocument","_id","encodeJsonPathToUriComponent","sourcePath","Array","isArray","encodeURIComponent","i","isRecord","value","encode","response","encoder","resultSourceMap","TypeError","result","encodeIntoResult","walkMap","resolveMappingResult","resolveMapping","mapping","pathSuffix","type","source","documents","document","paths","mappingFn","arguments","length","undefined","v","idx","Object","fromEntries","entries","_ref","k","resultPath","csm","logger","resultJsonPath","mappings","error","filter","_ref2","startsWith","sort","_ref3","_ref4","key1","key2","matchedPath","substring","filterDefault","_ref5","endPath","at","TRUNCATE_LENGTH","createTranscoder","encodeSourceMapAtPath","createEditLink","report","encoded","skipped","transcode","input","JSON","stringify","slice","vercelStegaEncode","origin","href","walk","transcodeResponse","_ref6","transcoder","onResponse","isBodyResponse","body","isPlainObject","isContentSourceMapBody","isSkipping","isEncoding","groupCollapsed","log","table","Map","set","parse","values","groupEnd","createHttpRequest","_ref7","invariant","superRequester","originalRequester","clone","use","httpRequest","options","requester","maxRedirects","defaultRequester","mapToEditLinks","_","createClient","config","encodeSourceMap","detectEnableSourceMap","detectStudioUrl","shouldEncodeSourceMap","isVercelPreviewEnvironment","debug","SanityClient","err","console","_createClient","VERCEL_ENV","process","env","SANITY_SOURCE_MAP","SANITY_STUDIO_URL"],"mappings":"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"}